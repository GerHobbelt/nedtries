language: cpp
compiler:
  - gcc
  - clang
notifications:
  email:
#    recipients:
#      - one@example.com
#      - other@example.com
    on_success: change # [always|never|change] # default: change
    on_failure: change # [always|never|change] # default: always
env:
  global:
    - secure: "LG1scRCvFAHZ2rWGLL5ShXTegKNF3+4YaT8BAZalpMWjwBbYnIbAYgFYOwCk\naUy8e5zpC8FElIctGY/9ni1wcGwQkP97YaMvcai1r0IBjbVBi8tqvqekc/5Q\n2pz8IlJXDz/WzTEVb9w7xIDfRCZq8Xiw9LpENvVwfpbrQfFJLLk="
  matrix:
    - _="Static analysis" VALGRIND=0 CCFLAGS="--analyze" UNIT_TESTS=0 DEBUG=0 GCCVER="" GCOV=0
    - _="Build test" VALGRIND=0 UNIT_TESTS=0 DEBUG=0 GCCVER="" GCOV=0
    - _="Unit/functional tests" VALGRIND=0 UNIT_TESTS="" DEBUG=2 GCCVER="" GCOV=0
#    - _="GCC 4.8 + Unit/functional tests coverage" VALGRIND=0 CCFLAGS="--usegcov --usegcc=g++-4.8" UNIT_TESTS="" DEBUG=1 GCCVER="4.8" GCOV=1
    - _="Memory error and leak tests" VALGRIND=memcheck UNIT_TESTS="" DEBUG=2 GCCVER="" GCOV=0
#    - _="Race detection tests" VALGRIND=0 CCFLAGS="--usethreadsanitize --usegcc=g++-4.8" UNIT_TESTS="" DEBUG=2 GCCVER="4.8" TSAN_OPTIONS="suppressions=unittests/tsan.supp" GCOV=0

matrix:
  exclude:
    - compiler: gcc
      env: _="Static analysis" VALGRIND=0 CCFLAGS="--analyze" UNIT_TESTS=0 DEBUG=0 GCCVER="" GCOV=0

before_install:
 - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
 - sudo apt-get update -qq
 - if [ $CXX = "clang++" ]; then sudo apt-get install -qq libstdc++-4.8-dev; fi
 - if [ $GCCVER != "" ]; then sudo apt-get install -qq g++-$GCCVER; fi
 - if [ $VALGRIND != "0" ]; then sudo apt-get install -qq valgrind; fi
 - git submodule update --init

script:
 - if [ $DEBUG -eq 0 ]; then PREFIXPATH="generic/Release"; DEBUGBUILD=""; fi
 - if [ $DEBUG -eq 1 ]; then PREFIXPATH="generic/Debug"; DEBUGBUILD="--debugbuild"; fi
 - if [ $DEBUG -eq 2 ]; then PREFIXPATH="generic/Debug"; DEBUGBUILD="--optdebugbuild"; fi
 - if [ $CC = "clang" ]; then scons -k --useclang $DEBUGBUILD $CCFLAGS; else scons -k $DEBUGBUILD $CCFLAGS; fi
 - if [ $VALGRIND = "memcheck" ]; then PREFIXTEST="valgrind --tool=memcheck --suppressions=memcheck.supp --track-origins=yes --track-fds=yes --leak-check=full --show-reachable=yes --error-exitcode=1"; fi
 - if [ $VALGRIND = "drd" ]; then PREFIXTEST="valgrind --tool=drd --suppressions=drd.supp --error-exitcode=1"; fi
 - if [ $VALGRIND = "0" ]; then PREFIXTEST=""; fi
 
 - if [ "$UNIT_TESTS" != "0" ]; then $PREFIXTEST $PREFIXPATH/test_cpp; fi

after_success:
 - if [ $GCOV -eq 1 ]; then bash unittests/update_coveralls.sh `pwd`; fi
  